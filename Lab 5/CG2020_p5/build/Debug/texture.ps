//this var comes from the vertex shader
varying vec2 v_coord;
varying vec3 v_wNormal;
varying vec3 v_wPos;


// point where the light is located
uniform vec3 lightpos;
// position of the eye
uniform vec3 eyepos;
//the texture passed from the application
uniform sampler2D color_texture;
// the normal map
uniform sampler2D normal_texture;
// ambient light in the scene 
uniform vec3 ia;
// amount of diffuse light 
uniform vec3 id;
// amount of specular light 
uniform vec3 is;
// model matrix
uniform mat4 model;


void main()
{
	//read the pixel RGBA from the texture at the position v_coord
	vec4 color = texture2D( color_texture, v_coord );
	
	// obtain normal from normal map in range [0,1]
    vec3 normal_m = texture2D(normal_texture, v_coord).rgb;
    // transform normal vector to range [-1,1]
    normal_m = normalize(normal_m * 2.0 - 1.0); 
	vec3 normal = (model * vec4(normal_m, 0.0)).xyz;

	//here we set up the normal as a color to see them as a debug

	vec3 L = normalize(lightpos - v_wPos);
	vec3 V = normalize(v_wPos - eyepos);
	vec3 R = normalize(reflect(L, normal));

	float LdotN = clamp(dot(L,  normal), 0.0, 1.0);
	float RdotV = clamp(dot(R, V), 0.0, 1.0);

	vec3 ambient = ia;
	vec3 diffuse = LdotN * id;
	vec3 specular = color.w * pow(RdotV, 13.0) * is;
	vec3 ip = color.xyz * (ambient + diffuse + specular);

	//assign the color to the output
	gl_FragColor = vec4( ip, 1.0 );
}
