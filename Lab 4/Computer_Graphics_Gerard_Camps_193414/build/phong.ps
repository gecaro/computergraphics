//this var comes from the vertex shader
//they are baricentric interpolated by pixel according to the distance to every vertex
varying vec3 v_wPos;
varying vec3 v_wNormal;

//here create uniforms for all the data we need here
// point where the light is located
uniform vec3 lightpos;
// position of the eye
uniform vec3 eyepos;
// ambient reflection of the material
uniform vec3 ka;
// reflected diffuse light of the material
uniform vec3 kd;
// reflected specular light of the material
uniform vec3 ks;
// shininess factor
uniform float alpha;
// ambient light in the scene 
uniform vec3 ia;
// amount of diffuse light 
uniform vec3 id;
// amount of specular light 
uniform vec3 is;


void main()
{
	//here we set up the normal as a color to see them as a debug
	vec3 L = normalize(lightpos - v_wPos);
	vec3 V = normalize(v_wPos - eyepos);
	vec3 R = normalize(reflect(L, v_wNormal));

	float LdotN = clamp(dot(L,  v_wNormal), 0.0, 1.0);
	float RdotV = clamp(dot(R, V), 0.0, 1.0);

	vec3 ambient = ka * ia;
	vec3 diffuse = kd * LdotN * id;
	vec3 specular = ks * pow(RdotV, alpha) * is;
	vec3 ip = ambient + diffuse + specular;

	//here write the computations for PHONG.

	//set the ouput color por the pixel
	gl_FragColor = vec4( ip, 1.0 ) * 1.0;
}
